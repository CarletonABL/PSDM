function tau = PSDM_inverseDynamics_twolink(Q, Qd, Qdd)

g = horzcat( sin(Q)', cos(Q)');

a = horzcat(Qd', Qdd');

N = size(Q, 2);
DOF = size(Q, 1);

tau = zeros(DOF, N);

PTheta = coder.const([-1.9612264 -1.9612264;51.9724996 5.81316197875567e-18;1.9612264 1.9612264;10.85 0.319999999999999;0.840000000000005 0.420000000000001;0.320000000000002 0.319999999999998;0.42 -3.52838971097683e-18;0 0.42;-0.420000000000001 0;-0.840000000000001 0]);

for i = 1:N

gi = g(i, :);
ai = a(i, :);

g1_1 = gi(:, 1);
g2_1 = gi(:, 2);


g3_1 = gi(:, 3);
g4_1 = gi(:, 4);


g3_2 = gi(:, 3).^2;
g4_2 = gi(:, 4).^2;


a1_1 = ai(:, 1);
a2_1 = ai(:, 2);
a3_1 = ai(:, 3);
a4_1 = ai(:, 4);


a1_2 = ai(:, 1).^2;
a2_2 = ai(:, 2).^2;





Up1 = 1;
Up2 = g4_1;
Up3 = g3_1;
Up4 = g3_1.*g4_1;
Up5 = g2_1;
Up6 = g1_1.*g2_1;


A1 = 1;
A2 = a4_1;
A3 = a3_1;
A4 = a2_2;
A5 = a1_1.*a2_1;
A6 = a1_2;


Ypi = [A1.*Up6,A1.*Up3,A1.*Up4,A3.*Up1,A3.*Up2,A2.*Up1,A2.*Up2,A6.*Up5,A4.*Up5,A5.*Up5];

tau(:, i) = (Ypi * PTheta)';

end


